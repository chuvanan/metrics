// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// auc_
double auc_(NumericVector actual, NumericVector predicted);
RcppExport SEXP _metrics_auc_(SEXP actualSEXP, SEXP predictedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predicted(predictedSEXP);
    rcpp_result_gen = Rcpp::wrap(auc_(actual, predicted));
    return rcpp_result_gen;
END_RCPP
}
// clip_
NumericVector clip_(NumericVector x, double mi, double ma);
RcppExport SEXP _metrics_clip_(SEXP xSEXP, SEXP miSEXP, SEXP maSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mi(miSEXP);
    Rcpp::traits::input_parameter< double >::type ma(maSEXP);
    rcpp_result_gen = Rcpp::wrap(clip_(x, mi, ma));
    return rcpp_result_gen;
END_RCPP
}
// confusion_matrix_
NumericMatrix confusion_matrix_(NumericVector actual, NumericVector predicted, double cutoff);
RcppExport SEXP _metrics_confusion_matrix_(SEXP actualSEXP, SEXP predictedSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(confusion_matrix_(actual, predicted, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// true_positive_rate_
double true_positive_rate_(NumericVector actual, NumericVector predicted, double cutoff);
RcppExport SEXP _metrics_true_positive_rate_(SEXP actualSEXP, SEXP predictedSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(true_positive_rate_(actual, predicted, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// true_negative_rate_
double true_negative_rate_(NumericVector actual, NumericVector predicted, double cutoff);
RcppExport SEXP _metrics_true_negative_rate_(SEXP actualSEXP, SEXP predictedSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(true_negative_rate_(actual, predicted, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// false_positive_rate_
double false_positive_rate_(NumericVector actual, NumericVector predicted, double cutoff);
RcppExport SEXP _metrics_false_positive_rate_(SEXP actualSEXP, SEXP predictedSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predicted(predictedSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(false_positive_rate_(actual, predicted, cutoff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_metrics_auc_", (DL_FUNC) &_metrics_auc_, 2},
    {"_metrics_clip_", (DL_FUNC) &_metrics_clip_, 3},
    {"_metrics_confusion_matrix_", (DL_FUNC) &_metrics_confusion_matrix_, 3},
    {"_metrics_true_positive_rate_", (DL_FUNC) &_metrics_true_positive_rate_, 3},
    {"_metrics_true_negative_rate_", (DL_FUNC) &_metrics_true_negative_rate_, 3},
    {"_metrics_false_positive_rate_", (DL_FUNC) &_metrics_false_positive_rate_, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_metrics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
